<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on My New Hugo Site</title>
    <link>http://nbspll.github.io/tags/hugo/</link>
    <description>Recent content in Hugo on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Feb 2019 17:05:32 +0800</lastBuildDate>
    
	<atom:link href="http://nbspll.github.io/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello Hugo (一)</title>
      <link>http://nbspll.github.io/2019/hugo%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 18 Feb 2019 17:05:32 +0800</pubDate>
      
      <guid>http://nbspll.github.io/2019/hugo%E6%95%99%E7%A8%8B/</guid>
      <description>  搭建  准备工作   搭建 准备工作  Go语言环境
Go语言各个平台的安装包请在官方网站处下载
 配置安装Go环境
Cmd 命令行中输入检查环境 go
 安装Git
Git版本管理工具各个平台安装包从官方网站处下载
 下载hugo
&amp;nbsp;hugo是github上的开源项目,所以直接去Github上下载
&amp;nbsp;下载后解压到某个盘,注意路径中不能有中文
&amp;nbsp;然后配置hugo的环境变量,否则不能使用,GO的配置环境看这里
&amp;nbsp;环境变量配置好了，打开命令行窗口,输入hugo -h 检查环境是否正确
  </description>
    </item>
    
    <item>
      <title>Hello Hugo (三)</title>
      <link>http://nbspll.github.io/2019/hugo%E6%95%99%E7%A8%8B%E4%B8%89/</link>
      <pubDate>Mon, 18 Feb 2019 17:05:32 +0800</pubDate>
      
      <guid>http://nbspll.github.io/2019/hugo%E6%95%99%E7%A8%8B%E4%B8%89/</guid>
      <description>设置  config.toml 说明 header 注意事项 快捷指令   设置 config.toml  菜单设置如下(可以自定义)  ├──[menu]
├──[[menu.min]]
├──name = &amp;quot;Blog&amp;quot;
├──url = &amp;quot;/posts/&amp;quot;
├──weight = 1
├──[[menu.main]]
├──name = &amp;quot;Categories&amp;quot;
├──url = &amp;quot;/categories/&amp;quot;
├──weight = 2
├──[[menu.main]]
├──name = &amp;quot;Tags&amp;quot;
├──url = &amp;quot;/tags/&amp;quot;
├──weight = 3
├──[[menu.main]]
├──name = &amp;quot;About&amp;quot;
└──url = &amp;quot;/about/&amp;quot;
  说明  Hugo的文章都是由Markdown语法转换成Html的 Frist.你需要掌握Markdwon语法 Second.你需要会使用Git来把代码部署到Github Third.写文章时候headre部分要注意  header  title: &amp;ldquo;Hugo set&amp;rdquo;
 date: 2019-02-18T17:05:32+08:00</description>
    </item>
    
    <item>
      <title>Hello Hugo (二)</title>
      <link>http://nbspll.github.io/2019/hugo%E6%95%99%E7%A8%8B%E4%BA%8C/</link>
      <pubDate>Mon, 18 Feb 2019 17:05:32 +0800</pubDate>
      
      <guid>http://nbspll.github.io/2019/hugo%E6%95%99%E7%A8%8B%E4%BA%8C/</guid>
      <description>1. 生成站点  1.1. 具体步骤  1.1.0.1. 创建页面与文章 1.1.0.2. 预览站点  部署Github   1. 生成站点 -打开Cmd,进入D盘，使用hugo命令生成新站点.
&amp;nbsp;Cmd命令行中输入 hugo new site blog &amp;nbsp;打开F盘就会有名为blog的文件夹,这就是我们hugo的站点根目录,我们看看目录结构
 Blog ├── archetypes ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes  一共六个文件夹，外加一个全局配置文件config.yaml（类似 hexo 的_config.yml），各个文件夹的作用如下：
 archetypes：给不同的类型定义默认FrontMatter， content：源文件，相当于 hexo 的 source 目录 data：数据文件，一般用不上 layouts：模板 static：静态资源，也就是不需要Hugo处理的静态资源，比如图片等 themes：第三方主题，将第三方主题拷贝到这个文件夹下即可使用  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;比较常用的就是 content 和 themes ，一个存放内容，一个存放主题。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;然后在官网选择一个主题拷贝到 themes 目录。
1.1. 具体步骤  从github里获取主题,使用Git获取文件
 打开Git Bash，进入我们的网站根目录里的themes，输入如下指令获取主题</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>http://nbspll.github.io/2018/hello-hugo/</link>
      <pubDate>Sun, 18 Feb 2018 17:05:32 +0800</pubDate>
      
      <guid>http://nbspll.github.io/2018/hello-hugo/</guid>
      <description>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;不算上17年的那一篇文章，其实有两年没有更新博客了。停滞了太久，都不知道要怎么再出发。回想起来好像还是最开始写独立博客的时候比较勤奋，只可惜博客系统换来换去，丢失了太多的博文。
其实写博客还是有很多好处的，除了锻炼写作能力，比如可以保持思考的习惯，可以保持前沿技术的敏感性，可以督促自己不断学习，最主要的是可以沉淀自己…只是在越来越浮躁的社会，我们总是不由自主的想走捷径，一味的追求快速和便捷，比如平时遇到个技术问题，Google之后用 Evernote 记录下就好了，如果要写篇博文，可能还需要介绍下问题的背景，对于解决方案还需要做下发散。又比如突然冒出个什么想法或是看到某句特别有感触的话，可能就直接保存到 Google Keep 了，如果又要写篇博文，没人会懂你的柔软，只会觉得你无病呻吟。所以有时候想写点东西，又不知道写什么。其实这一直都不是个问题啊，就去写好了，有没有人喝彩，又有什么不同？
在此之前是使用 Hexo，虽然各种主题插件支持都很完善，但是其缺点是一大堆nodejs的依赖，记得以前每次更新下 Node 就各种莫名其妙的问题，另外生成的速度非常慢。这次使用的 Hugo 是基于 Go 开发，也是我目前用得比较多的一门语言。直接编译生成一个二进制文件，没有包依赖的问题，生成速度相比 Hexo 快的不只是一点点。目前我博客所有博文加上各种 Page、Tag 页面300篇左右，生成速度不到1秒。于是花了几个周末的时间，把博客迁移到了 Hugo，嗯，又开始折腾了。
安装 使用 Homebrew 安装.(如果还没有安装Homebrew，参考：这里)
 brew install hugo  新建站点 直接在 Home 目录生成Blog 站点。
 hugo new site ~/Blog  使用上述命令会在当前用户目录下面生成一个Blog 站点，打开后看到如下图的站点目录结构
 Blog ├── archetypes ├── config.yaml ├── content ├── data ├── layouts ├── static └── themes  一共六个文件夹，外加一个全局配置文件config.yaml（类似 hexo 的_config.yml），各个文件夹的作用如下：
 archetypes：给不同的类型定义默认FrontMatter， content：源文件，相当于 hexo 的 source 目录 data：数据文件，一般用不上 layouts：模板 static：静态资源，也就是不需要Hugo处理的静态资源，比如图片等 themes：第三方主题，将第三方主题拷贝到这个文件夹下即可使用  比较常用的就是 content 和 themes ，一个存放内容，一个存放主题。可以直接将 hexo 中 source 目录下的 md 文件全拷贝到content目录。 同时将图片资源文件拷贝到 static 目录。因为文章和目录结构都没有改变，所有文章里面的图片链接路径都不需要修改。如果之前的 Markdown 文件都使用了 Hexo 标准的 Front-matter，Hugo 支持 yaml、toml、json 三种格式的Front matter，像 title、date、categories、tags这样的字段，Hugo 也无缝支持。</description>
    </item>
    
  </channel>
</rss>